{"version":3,"sources":["ArticlesConverter/index.js","components/RawTextInput.js","components/TemporaryAlert.js","components/CopyToClipboard.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["ArticlesConverter","rawText","userHandle","_this","this","Object","classCallCheck","checkForImage","imageId","concat","formatTags","tags","map","_ref","name","slug","formatArticle","rawArticle","id","title","uniqueSlug","_rawArticle$virtuals","virtuals","previewImage","_rawArticle$content","content","subtitle","metaDescription","link","image","niceJSONArticles","JSON","parse","slice","indexOf","payload","references","Post","_this2","keys","roughJSONArticles","article","RawConverter","handleChange","handleSubmit","react_default","a","createElement","href","target","onSubmit","value","onChange","type","TemporaryAlert","props","msg","setIsAlertVisible","isAlertVisible","useEffect","setTimeout","CopyToClipboard","articles","_useState","useState","_useState2","slicedToArray","_useState3","_useState4","isAlertError","setIsAlertError","length","document","getElementById","select","execCommand","error","console","log","style","position","top","readOnly","stringify","components_TemporaryAlert","MainComponent","setRawText","setArticles","RawTextInput","e","preventDefault","components_CopyToClipboard","App","className","components_MainComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.332c0816.chunk.js","sourcesContent":["class ArticlesConverter {\n    constructor(rawText, userHandle) {\n        this.userHandle = userHandle;\n        this.rawText = rawText;\n        return this.niceJSONArticles;\n    }\n\n    checkForImage = (imageId) => (\n        imageId\n            ? `https://miro.medium.com/max/1400/${imageId}`\n            : 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5b/Pictogram_voting_question.svg/440px-Pictogram_voting_question.svg.png'\n    );\n\n    formatTags = (tags) => tags.map(({ name, slug }) => ({ name, slug }))\n\n    formatArticle = (rawArticle) => {\n        const {\n            id,\n            title,\n            slug,\n            uniqueSlug,\n            virtuals: { previewImage: { imageId }, tags },\n            content: { subtitle, metaDescription },\n        } = rawArticle;\n\n        const link = `https://medium.com/@${this.userHandle}/${uniqueSlug}`;\n\n        return {\n            id,\n            title,\n            slug,\n            link,\n            image: this.checkForImage(imageId),\n            subtitle,\n            metaDescription,\n            tags: this.formatTags(tags),\n        };\n    };\n\n    get roughJSONArticles() {\n        return JSON.parse(this.rawText.slice(this.rawText.indexOf('{'))).payload.references.Post;\n    }\n\n    get niceJSONArticles() {\n        return Object.keys(this.roughJSONArticles).map(article => this.formatArticle(this.roughJSONArticles[article]));\n    }\n}\n\nexport default ArticlesConverter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst RawConverter = ({ rawText, handleChange, handleSubmit }) => {\n    return (\n        <div id='home'>\n            <h1>RawConverter</h1>\n            <a href='https://medium.com/@mikecronin92/latest?format=json' target=\"_source\">Go here and click cmd + a to select everything</a>\n            <form\n                onSubmit={handleSubmit}\n            >\n                <textarea id=\"raw-text-input\" value={rawText} onChange={handleChange} />\n                <input type='submit' value='Convert' />\n            </form>\n        </div>\n    );\n};\n\nRawConverter.propTypes = {\n    rawText: PropTypes.string,\n    handleChange: PropTypes.func,\n    handleSubmit: PropTypes.func,\n};\n\nexport default RawConverter;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst TemporaryAlert = (props) => {\n    // TODO add error class for styling\n    const { msg, setIsAlertVisible, isAlertVisible } = props;\n\n    useEffect(() => {\n        if (isAlertVisible) setTimeout(() => setIsAlertVisible(false), 2000);\n    }, [isAlertVisible])\n\n    return (\n        <div id='temporary-alert'>\n            {\n                isAlertVisible\n                    ? <p>{ msg }</p>\n                    : ''\n            }\n        </div>\n    );\n};\n\nTemporaryAlert.propTypes = {\n    msg: PropTypes.string,\n    setIsAlertVisible: PropTypes.func,\n    isAlertVisible: PropTypes.bool,\n    isAlertError: PropTypes.bool,\n};\n\nexport default TemporaryAlert;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TemporaryAlert from './TemporaryAlert';\n\nconst CopyToClipboard = (props) => {\n    const { articles } = props;\n    const [isAlertVisible, setIsAlertVisible] = useState(false);\n    const [isAlertError, setIsAlertError] = useState(false);\n\n    useEffect(() => {\n        if (articles.length) {\n            try {\n                document.getElementById('json-articles').select();\n                document.execCommand('copy');\n                setIsAlertError(false);\n                setIsAlertVisible(true);\n            } catch (error) {\n                console.log('error: ', error);\n                setIsAlertError(true);\n            }\n            setIsAlertVisible(true);\n        }\n    }, [articles]);\n\n    return (\n        <div id='copy-to-clipboard'>\n            <textarea\n                id='json-articles'\n                style={{ position: 'fixed', top: '-100rem' }}\n                readOnly\n                value={JSON.stringify(articles, null, 4)}\n            />\n            <TemporaryAlert\n                msg={isAlertError ? 'Something went wrong with copying the JSON to the clipboard' : 'JSON successfully saved to your clipboard!'}\n                setIsAlertVisible={setIsAlertVisible}\n                isAlertVisible={isAlertVisible}\n                isAlertError={isAlertError}\n            />\n        </div>\n    );\n};\n\nCopyToClipboard.propTypes = {\n    articles: PropTypes.array,\n};\n\nexport default CopyToClipboard;\n","import React, { useState } from 'react';\nimport ArticlesConverter from '../ArticlesConverter';\nimport RawTextConverter from './RawTextInput';\nimport CopyToClipboard from './CopyToClipboard';\n\nconst MainComponent = () => {\n    const [rawText, setRawText] = useState('');\n    const [articles, setArticles] = useState([]);\n\n    const handleChange = (e) => {\n        setRawText(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setArticles(new ArticlesConverter(rawText, 'mikecronin92'));\n    };\n\n    return (\n        <div id='main-component'>\n            <h1>MainComponent</h1>\n            <RawTextConverter\n                handleChange = {handleChange}\n                handleSubmit = {handleSubmit}\n                rawText = {rawText}\n            />\n            <CopyToClipboard articles={articles} />\n        </div>\n    );\n};\n\nexport default MainComponent;\n","import React from 'react';\nimport './App.css';\nimport MainComponent from './components/MainComponent';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <h1>Hello there</h1>\n            <MainComponent />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}